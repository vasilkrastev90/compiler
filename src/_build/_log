### Starting build.
# Target: connecting.ml.depends, tags: { extension:ml, file:connecting.ml, ocaml, ocamldep, package(core), quiet, thread, traverse }
ocamlfind ocamldep -package core -modules connecting.ml > connecting.ml.depends # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, package(core), quiet, thread, traverse }
/usr/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, package(core), quiet, thread, traverse }
ocamlfind ocamldep -package core -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly.depends, tags: { extension:mly, file:parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, package(core), quiet, thread, traverse }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends
# Target: Syntax.ml.depends, tags: { extension:ml, file:Syntax.ml, ocaml, ocamldep, package(core), quiet, thread, traverse }
ocamlfind ocamldep -package core -modules Syntax.ml > Syntax.ml.depends # cached
# Target: Syntax.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:Syntax.cmo, file:Syntax.ml, implem, ocaml, package(core), quiet, thread, traverse }
ocamlfind ocamlc -c -thread -package core -o Syntax.cmo Syntax.ml # cached
# Target: parser.mly, tags: { byte, compile, extension:ml, extension:mly, file:parser.ml, file:parser.mly, infer, menhir, ocaml, package(core), parser, quiet, thread, traverse }
menhir --ocamlc 'ocamlfind ocamlc -thread -package core' --infer parser.mly
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, package(core), quiet, thread, traverse }
ocamlfind ocamldep -package core -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, package(core), quiet, thread, traverse }
ocamlfind ocamlc -c -thread -package core -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, package(core), quiet, thread, traverse }
ocamlfind ocamlc -c -thread -package core -o lexer.cmo lexer.ml # cached
# Target: connecting.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:connecting.cmo, file:connecting.ml, implem, ocaml, package(core), quiet, thread, traverse }
ocamlfind ocamlc -c -thread -package core -o connecting.cmo connecting.ml # cached
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, package(core), quiet, thread, traverse }
ocamlfind ocamldep -package core -modules parser.ml > parser.ml.depends
# Target: Syntax.cmx, tags: { compile, extension:cmx, extension:ml, file:Syntax.cmx, file:Syntax.ml, implem, native, ocaml, package(core), quiet, thread, traverse }
ocamlfind ocamlopt -c -thread -package core -o Syntax.cmx Syntax.ml # cached
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, package(core), quiet, thread, traverse }
ocamlfind ocamlopt -c -thread -package core -o parser.cmx parser.ml
# Target: lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, package(core), quiet, thread, traverse }
ocamlfind ocamlopt -c -thread -package core -o lexer.cmx lexer.ml
# Target: connecting.cmx, tags: { compile, extension:cmx, extension:ml, file:connecting.cmx, file:connecting.ml, implem, native, ocaml, package(core), quiet, thread, traverse }
ocamlfind ocamlopt -c -thread -package core -o connecting.cmx connecting.ml
+ ocamlfind ocamlopt -c -thread -package core -o connecting.cmx connecting.ml
File "connecting.ml", line 20, characters 3-5:
Warning 11: this match case is unused.
# Target: connecting.native, tags: { dont_link_with, extension:native, file:connecting.native, link, native, ocaml, package(core), program, quiet, thread, traverse }
ocamlfind ocamlopt -linkpkg -thread -package core Syntax.cmx parser.cmx lexer.cmx connecting.cmx -o connecting.native
# Compilation successful.
