# 3 "lexer.mll"
 
	open Parser
	exception SyntaxError of string

# 7 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\241\255\242\255\243\255\010\000\245\255\246\255\247\255\
    \248\255\249\255\250\255\251\255\252\255\000\000\001\000\002\000\
    \005\000\006\000\000\000\000\000\253\255\061\000\251\255\252\255\
    \001\000\120\000\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\011\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\013\000\013\000\001\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \002\000\001\000\255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\024\000\000\000\000\000\
    \024\000\024\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\016\000\015\000\015\000\015\000\014\000\016\000\017\000\
    \015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \016\000\000\000\003\000\255\255\000\000\016\000\000\000\000\000\
    \010\000\009\000\005\000\008\000\000\000\007\000\000\000\006\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\026\000\
    \000\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\019\000\000\000\000\000\000\000\013\000\020\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\012\000\000\000\011\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \000\000\023\000\255\255\000\000\000\000\000\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \000\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\022\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\014\000\015\000\000\000\016\000\015\000\
    \017\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\024\000\255\255\016\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\024\000\255\255\021\000\
    \255\255\013\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\018\000\255\255\255\255\255\255\000\000\019\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \255\255\021\000\025\000\255\255\255\255\255\255\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \255\255\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\255\255\025\000\255\255\255\255\255\255\
    \255\255\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\024\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\021\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \025\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec main lexbuf =
    __ocaml_lex_main_rec lexbuf 0
and __ocaml_lex_main_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 16 "lexer.mll"
          ( main lexbuf )
# 143 "lexer.ml"

  | 1 ->
# 17 "lexer.mll"
            ( LINE_BREAK )
# 148 "lexer.ml"

  | 2 ->
# 18 "lexer.mll"
           ( MAIN )
# 153 "lexer.ml"

  | 3 ->
# 19 "lexer.mll"
        ( OPEN_BRACE )
# 158 "lexer.ml"

  | 4 ->
# 20 "lexer.mll"
         ( CLOSE_BRACE )
# 163 "lexer.ml"

  | 5 ->
# 21 "lexer.mll"
         ( OPEN_BRACKET )
# 168 "lexer.ml"

  | 6 ->
# 22 "lexer.mll"
         ( CLOSE_BRACKET )
# 173 "lexer.ml"

  | 7 ->
# 23 "lexer.mll"
         ( PLUS )
# 178 "lexer.ml"

  | 8 ->
# 24 "lexer.mll"
         ( MINUS )
# 183 "lexer.ml"

  | 9 ->
# 25 "lexer.mll"
         ( DIVIDE )
# 188 "lexer.ml"

  | 10 ->
# 26 "lexer.mll"
         ( MULTIPLY )
# 193 "lexer.ml"

  | 11 ->
# 27 "lexer.mll"
         ( INT (int_of_string (Lexing.lexeme lexbuf)) )
# 198 "lexer.ml"

  | 12 ->
# 28 "lexer.mll"
        ( read_str (Buffer.create 6) lexbuf )
# 203 "lexer.ml"

  | 13 ->
# 30 "lexer.mll"
       ( raise (SyntaxError ("Deal with it: " ^ Lexing.lexeme lexbuf)) )
# 208 "lexer.ml"

  | 14 ->
# 32 "lexer.mll"
        ( EOF )
# 213 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_main_rec lexbuf __ocaml_lex_state

and read_str buf lexbuf =
    __ocaml_lex_read_str_rec buf lexbuf 21
and __ocaml_lex_read_str_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 36 "lexer.mll"
        ( STRING (Buffer.contents buf) )
# 225 "lexer.ml"

  | 1 ->
# 37 "lexer.mll"
          ( Buffer.add_string buf string; read_string buf lexbuf )
# 230 "lexer.ml"

  | 2 ->
# 38 "lexer.mll"
                 ( Buffer.add_string buf (Lexing.lexeme lexbuf); read_str buf lexbuf )
# 235 "lexer.ml"

  | 3 ->
# 40 "lexer.mll"
       ( raise (SyntaxError ("Illegal string character: " ^ Lexing.lexeme lexbuf)) )
# 240 "lexer.ml"

  | 4 ->
# 42 "lexer.mll"
        ( raise (SyntaxError ("Expected '\"' Found End of File ")) )
# 245 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_read_str_rec buf lexbuf __ocaml_lex_state

;;

